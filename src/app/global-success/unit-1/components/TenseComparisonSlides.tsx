// pdf-to-learn/src/app/global-success/unit-1/components/TenseComparisonSlides.tsx
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Clock, Zap, AlertTriangle, CheckCircle, XCircle } from 'lucide-react';

// Slide 1: Introduction
export const IntroductionSlide: React.FC = () => {
  return (
    <div className="py-4">
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.8 }}
        className="text-center mb-8"
      >
        <h3 className="text-4xl md:text-6xl font-bold bg-gradient-to-r from-blue-500 via-purple-500 to-green-500 bg-clip-text text-transparent font-baloo-2 mb-6">
          ‚öñÔ∏è So S√°nh 2 Th√¨
        </h3>
        <p className="text-2xl text-gray-600 mb-8">Present Simple vs Present Continuous</p>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Present Simple */}
        <motion.div
          initial={{ x: -100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 0.3, duration: 0.6 }}
          className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-3xl p-8 shadow-2xl border-4 border-blue-200"
        >
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-r from-blue-500 to-cyan-500 text-white mb-6 shadow-lg">
              <Clock className="w-10 h-10" />
            </div>
            <h4 className="text-3xl font-bold text-blue-700 mb-4 font-baloo-2">
              Present Simple
            </h4>
            <div className="space-y-3 text-left">
              <div className="bg-white rounded-lg p-3 shadow-inner">
                <p className="text-lg font-semibold text-gray-800">üîÑ Th√≥i quen, l·∫∑p l·∫°i</p>
              </div>
              <div className="bg-white rounded-lg p-3 shadow-inner">
                <p className="text-lg font-semibold text-gray-800">üìö S·ª± th·∫≠t, ch√¢n l√Ω</p>
              </div>
              <div className="bg-white rounded-lg p-3 shadow-inner">
                <p className="text-lg font-semibold text-gray-800">üìÖ L·ªãch tr√¨nh c·ªë ƒë·ªãnh</p>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Present Continuous */}
        <motion.div
          initial={{ x: 100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ delay: 0.5, duration: 0.6 }}
          className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-3xl p-8 shadow-2xl border-4 border-green-200"
        >
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white mb-6 shadow-lg">
              <Zap className="w-10 h-10" />
            </div>
            <h4 className="text-3xl font-bold text-green-700 mb-4 font-baloo-2">
              Present Continuous
            </h4>
            <div className="space-y-3 text-left">
              <div className="bg-white rounded-lg p-3 shadow-inner">
                <p className="text-lg font-semibold text-gray-800">‚ö° ƒêang x·∫£y ra b√¢y gi·ªù</p>
              </div>
              <div className="bg-white rounded-lg p-3 shadow-inner">
                <p className="text-lg font-semibold text-gray-800">‚è∞ T·∫°m th·ªùi</p>
              </div>
              <div className="bg-white rounded-lg p-3 shadow-inner">
                <p className="text-lg font-semibold text-gray-800">üîÑ K·∫ø ho·∫°ch t∆∞∆°ng lai g·∫ßn</p>
              </div>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Key Difference */}
      <motion.div
        initial={{ y: 50, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        transition={{ delay: 0.8, duration: 0.6 }}
        className="mt-8 bg-gradient-to-r from-yellow-100 to-orange-100 rounded-3xl p-8 shadow-2xl border-4 border-yellow-200"
      >
        <div className="text-center">
          <h4 className="text-3xl font-bold text-orange-700 font-baloo-2 mb-4">
            üîë ƒêi·ªÉm kh√°c bi·ªát ch√≠nh
          </h4>
          <div className="bg-white rounded-2xl p-6 shadow-inner">
            <p className="text-2xl text-gray-700 leading-relaxed">
              <span className="font-bold text-blue-600">Present Simple</span> = Th∆∞·ªùng xuy√™n, l·∫∑p l·∫°i<br/>
              <span className="font-bold text-green-600">Present Continuous</span> = ƒêang di·ªÖn ra ngay b√¢y gi·ªù
            </p>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

// Slide 2: Time Expressions Comparison
export const TimeExpressionsSlide: React.FC = () => {
  const [hoveredSide, setHoveredSide] = useState<'simple' | 'continuous' | null>(null);

  const simpleExpressions = [
    { word: "always", meaning: "lu√¥n lu√¥n", example: "I always brush my teeth." },
    { word: "usually", meaning: "th∆∞·ªùng th∆∞·ªùng", example: "She usually goes to school by bus." },
    { word: "often", meaning: "th∆∞·ªùng xuy√™n", example: "We often play football." },
    { word: "sometimes", meaning: "ƒë√¥i khi", example: "He sometimes watches TV." },
    { word: "never", meaning: "kh√¥ng bao gi·ªù", example: "They never eat fast food." },
    { word: "every day", meaning: "m·ªói ng√†y", example: "I study English every day." }
  ];

  const continuousExpressions = [
    { word: "now", meaning: "b√¢y gi·ªù", example: "I am studying now." },
    { word: "right now", meaning: "ngay b√¢y gi·ªù", example: "She is cooking right now." },
    { word: "at the moment", meaning: "l√∫c n√†y", example: "They are playing at the moment." },
    { word: "Look!", meaning: "Nh√¨n k√¨a!", example: "Look! The baby is sleeping." },
    { word: "Listen!", meaning: "Nghe n√†y!", example: "Listen! Someone is singing." },
    { word: "today", meaning: "h√¥m nay", example: "I am working from home today." }
  ];

  return (
    <div className="py-4">
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-8"
      >
        <h3 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-500 to-pink-600 bg-clip-text text-transparent font-baloo-2 mb-4">
          üïê T·ª´ ch·ªâ th·ªùi gian
        </h3>
        <p className="text-xl text-gray-600">Di chu·ªôt qua t·ª´ng b√™n ƒë·ªÉ xem chi ti·∫øt!</p>
      </motion.div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* Present Simple */}
        <motion.div
          initial={{ x: -100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ duration: 0.6 }}
          className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-3xl p-8 shadow-2xl border-4 border-blue-200 cursor-pointer"
          onMouseEnter={() => setHoveredSide('simple')}
          onMouseLeave={() => setHoveredSide(null)}
          whileHover={{ scale: 1.02 }}
        >
          <h4 className="text-3xl font-bold text-blue-700 text-center mb-6 font-baloo-2">
            Present Simple
          </h4>
          
          <div className="space-y-3">
            {simpleExpressions.map((expr, index) => (
              <motion.div
                key={expr.word}
                initial={{ x: -20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: index * 0.1 }}
                className={`bg-white rounded-lg p-4 shadow-inner transition-all duration-200 ${
                  hoveredSide === 'simple' ? 'transform scale-105' : ''
                }`}
              >
                <div className="flex justify-between items-center mb-2">
                  <span className="font-bold text-blue-700 text-lg">{expr.word}</span>
                  <span className="text-sm text-gray-500 italic">({expr.meaning})</span>
                </div>
                {hoveredSide === 'simple' && (
                  <motion.p
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="text-sm text-gray-600 italic"
                  >
                    {expr.example}
                  </motion.p>
                )}
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Present Continuous */}
        <motion.div
          initial={{ x: 100, opacity: 0 }}
          animate={{ x: 0, opacity: 1 }}
          transition={{ duration: 0.6 }}
          className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-3xl p-8 shadow-2xl border-4 border-green-200 cursor-pointer"
          onMouseEnter={() => setHoveredSide('continuous')}
          onMouseLeave={() => setHoveredSide(null)}
          whileHover={{ scale: 1.02 }}
        >
          <h4 className="text-3xl font-bold text-green-700 text-center mb-6 font-baloo-2">
            Present Continuous
          </h4>
          
          <div className="space-y-3">
            {continuousExpressions.map((expr, index) => (
              <motion.div
                key={expr.word}
                initial={{ x: 20, opacity: 0 }}
                animate={{ x: 0, opacity: 1 }}
                transition={{ delay: index * 0.1 }}
                className={`bg-white rounded-lg p-4 shadow-inner transition-all duration-200 ${
                  hoveredSide === 'continuous' ? 'transform scale-105' : ''
                }`}
              >
                <div className="flex justify-between items-center mb-2">
                  <span className="font-bold text-green-700 text-lg">{expr.word}</span>
                  <span className="text-sm text-gray-500 italic">({expr.meaning})</span>
                </div>
                {hoveredSide === 'continuous' && (
                  <motion.p
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="text-sm text-gray-600 italic"
                  >
                    {expr.example}
                  </motion.p>
                )}
              </motion.div>
            ))}
          </div>
        </motion.div>
      </div>
    </div>
  );
};

// Slide 3: Examples Comparison
export const ExamplesComparisonSlide: React.FC = () => {
  const [selectedExample, setSelectedExample] = useState<number | null>(null);

  const comparisons = [
    {
      id: 1,
      situation: "Ho·∫°t ƒë·ªông h√†ng ng√†y",
      simple: {
        sentence: "I drink coffee every morning.",
        translation: "T√¥i u·ªëng c√† ph√™ m·ªói s√°ng.",
        explanation: "Th√≥i quen h√†ng ng√†y, l·∫∑p l·∫°i"
      },
      continuous: {
        sentence: "I am drinking coffee now.",
        translation: "T√¥i ƒëang u·ªëng c√† ph√™ b√¢y gi·ªù.",
        explanation: "H√†nh ƒë·ªông ƒëang di·ªÖn ra l√∫c n√†y"
      }
    },
    {
      id: 2,
      situation: "C√¥ng vi·ªác",
      simple: {
        sentence: "She works in a hospital.",
        translation: "C√¥ ·∫•y l√†m vi·ªác ·ªü b·ªánh vi·ªán.",
        explanation: "C√¥ng vi·ªác c·ªë ƒë·ªãnh, l√¢u d√†i"
      },
      continuous: {
        sentence: "She is working on a project.",
        translation: "C√¥ ·∫•y ƒëang l√†m m·ªôt d·ª± √°n.",
        explanation: "C√¥ng vi·ªác t·∫°m th·ªùi, hi·ªán t·∫°i"
      }
    },
    {
      id: 3,
      situation: "H·ªçc t·∫≠p",
      simple: {
        sentence: "We study English at school.",
        translation: "Ch√∫ng t√¥i h·ªçc ti·∫øng Anh ·ªü tr∆∞·ªùng.",
        explanation: "M√¥n h·ªçc th∆∞·ªùng xuy√™n"
      },
      continuous: {
        sentence: "We are studying for the exam.",
        translation: "Ch√∫ng t√¥i ƒëang h·ªçc cho k·ª≥ thi.",
        explanation: "H·ªçc cho m·ª•c ƒë√≠ch c·ª• th·ªÉ, t·∫°m th·ªùi"
      }
    },
    {
      id: 4,
      situation: "Th·ªÉ thao",
      simple: {
        sentence: "He plays football on weekends.",
        translation: "Anh ·∫•y ch∆°i b√≥ng ƒë√° v√†o cu·ªëi tu·∫ßn.",
        explanation: "Ho·∫°t ƒë·ªông th∆∞·ªùng xuy√™n, theo l·ªãch"
      },
      continuous: {
        sentence: "He is playing football right now.",
        translation: "Anh ·∫•y ƒëang ch∆°i b√≥ng ƒë√° ngay b√¢y gi·ªù.",
        explanation: "ƒêang ch∆°i t·∫°i th·ªùi ƒëi·ªÉm n√≥i"
      }
    }
  ];

  return (
    <div className="py-4">
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-8"
      >
        <h3 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-red-500 to-orange-600 bg-clip-text text-transparent font-baloo-2 mb-4">
          üìù So s√°nh v√≠ d·ª•
        </h3>
        <p className="text-xl text-gray-600">Nh·∫•p v√†o t·ª´ng t√¨nh hu·ªëng ƒë·ªÉ xem chi ti·∫øt!</p>
      </motion.div>

      <div className="space-y-6">
        {comparisons.map((comp, index) => (
          <motion.div
            key={comp.id}
            initial={{ y: 50, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: index * 0.2, duration: 0.6 }}
            className="bg-gradient-to-br from-gray-50 to-white rounded-3xl p-6 shadow-2xl border-4 border-gray-200 cursor-pointer"
            onClick={() => setSelectedExample(selectedExample === comp.id ? null : comp.id)}
            whileHover={{ y: -2 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="text-center mb-4">
              <h4 className="text-2xl font-bold text-gray-800 font-baloo-2">
                {comp.situation}
              </h4>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Present Simple */}
              <div className="bg-gradient-to-br from-blue-50 to-cyan-50 rounded-2xl p-6 border-2 border-blue-200">
                <div className="flex items-center mb-3">
                  <Clock className="w-6 h-6 text-blue-600 mr-2" />
                  <h5 className="text-xl font-bold text-blue-700">Present Simple</h5>
                </div>
                <div className="bg-white rounded-lg p-4 shadow-inner mb-3">
                  <p className="text-lg font-semibold text-gray-800">{comp.simple.sentence}</p>
                  <p className="text-md text-gray-600 italic">{comp.simple.translation}</p>
                </div>
                {selectedExample === comp.id && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="bg-blue-100 rounded-lg p-3"
                  >
                    <p className="text-sm text-blue-800">üí° {comp.simple.explanation}</p>
                  </motion.div>
                )}
              </div>

              {/* Present Continuous */}
              <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-2xl p-6 border-2 border-green-200">
                <div className="flex items-center mb-3">
                  <Zap className="w-6 h-6 text-green-600 mr-2" />
                  <h5 className="text-xl font-bold text-green-700">Present Continuous</h5>
                </div>
                <div className="bg-white rounded-lg p-4 shadow-inner mb-3">
                  <p className="text-lg font-semibold text-gray-800">{comp.continuous.sentence}</p>
                  <p className="text-md text-gray-600 italic">{comp.continuous.translation}</p>
                </div>
                {selectedExample === comp.id && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="bg-green-100 rounded-lg p-3"
                  >
                    <p className="text-sm text-green-800">üí° {comp.continuous.explanation}</p>
                  </motion.div>
                )}
              </div>
            </div>

            {selectedExample !== comp.id && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="mt-4 text-center"
              >
                <p className="text-sm text-gray-500">üëÜ Nh·∫•p ƒë·ªÉ xem gi·∫£i th√≠ch</p>
              </motion.div>
            )}
          </motion.div>
        ))}
      </div>
    </div>
  );
};

// Slide 4: Common Mistakes
export const CommonMistakesSlide: React.FC = () => {
  const [selectedMistake, setSelectedMistake] = useState<number | null>(null);

  const mistakes = [
    {
      id: 1,
      title: "Nh·∫ßm l·∫´n t·ª´ ch·ªâ th·ªùi gian",
      wrong: "I am always going to school by bus.",
      correct: "I always go to school by bus.",
      explanation: "'Always' d√πng v·ªõi Present Simple, kh√¥ng d√πng v·ªõi Present Continuous",
      tip: "Nh·ªõ: always, usually, often, sometimes ‚Üí Present Simple"
    },
    {
      id: 2,
      title: "D√πng sai th√¨ v·ªõi 'now'",
      wrong: "I study English now.",
      correct: "I am studying English now.",
      explanation: "'Now' ch·ªâ th·ªùi ƒëi·ªÉm hi·ªán t·∫°i ‚Üí d√πng Present Continuous",
      tip: "Nh·ªõ: now, right now, at the moment ‚Üí Present Continuous"
    },
    {
      id: 3,
      title: "Qu√™n th√™m 's/es' v·ªõi ng√¥i th·ª© 3 s·ªë √≠t",
      wrong: "She work in a bank.",
      correct: "She works in a bank.",
      explanation: "He/She/It + V(s/es) trong Present Simple",
      tip: "Nh·ªõ: He/She/It ‚Üí ƒë·ªông t·ª´ ph·∫£i th√™m s/es"
    },
    {
      id: 4,
      title: "D√πng Present Continuous v·ªõi ƒë·ªông t·ª´ tr·∫°ng th√°i",
      wrong: "I am knowing the answer.",
      correct: "I know the answer.",
      explanation: "ƒê·ªông t·ª´ 'know' l√† ƒë·ªông t·ª´ tr·∫°ng th√°i, kh√¥ng d√πng v·ªõi Present Continuous",
      tip: "ƒê·ªông t·ª´ tr·∫°ng th√°i: know, like, love, want, need ‚Üí ch·ªâ d√πng Present Simple"
    }
  ];

  return (
    <div className="py-4">
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-8"
      >
        <h3 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-red-500 to-pink-600 bg-clip-text text-transparent font-baloo-2 mb-4">
          ‚ö†Ô∏è L·ªói th∆∞·ªùng g·∫∑p
        </h3>
        <p className="text-xl text-gray-600">Nh·∫•p v√†o t·ª´ng l·ªói ƒë·ªÉ xem c√°ch s·ª≠a!</p>
      </motion.div>

      <div className="space-y-6">
        {mistakes.map((mistake, index) => (
          <motion.div
            key={mistake.id}
            initial={{ x: index % 2 === 0 ? -100 : 100, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ delay: index * 0.2, duration: 0.6 }}
            className="bg-gradient-to-br from-red-50 to-pink-50 rounded-3xl p-6 shadow-2xl border-4 border-red-200 cursor-pointer"
            onClick={() => setSelectedMistake(selectedMistake === mistake.id ? null : mistake.id)}
            whileHover={{ y: -2 }}
            whileTap={{ scale: 0.98 }}
          >
            <div className="flex items-center mb-4">
              <AlertTriangle className="w-8 h-8 text-red-600 mr-3" />
              <h4 className="text-2xl font-bold text-red-700 font-baloo-2">
                {mistake.title}
              </h4>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Wrong */}
              <div className="bg-white rounded-2xl p-4 shadow-inner border-2 border-red-300">
                <div className="flex items-center mb-2">
                  <XCircle className="w-5 h-5 text-red-600 mr-2" />
                  <span className="font-bold text-red-700">Sai:</span>
                </div>
                <p className="text-lg text-gray-800 line-through">{mistake.wrong}</p>
              </div>

              {/* Correct */}
              <div className="bg-white rounded-2xl p-4 shadow-inner border-2 border-green-300">
                <div className="flex items-center mb-2">
                  <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                  <span className="font-bold text-green-700">ƒê√∫ng:</span>
                </div>
                <p className="text-lg text-gray-800 font-semibold">{mistake.correct}</p>
              </div>
            </div>

            {selectedMistake === mistake.id && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                transition={{ duration: 0.4 }}
                className="mt-6 bg-white rounded-2xl p-4 shadow-inner"
              >
                <div className="mb-3">
                  <p className="text-lg font-semibold text-gray-800 mb-2">üìù Gi·∫£i th√≠ch:</p>
                  <p className="text-md text-gray-700">{mistake.explanation}</p>
                </div>
                <div className="bg-yellow-100 rounded-lg p-3">
                  <p className="text-sm font-semibold text-yellow-800">üí° M·∫πo nh·ªõ: {mistake.tip}</p>
                </div>
              </motion.div>
            )}

            {selectedMistake !== mistake.id && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="mt-4 text-center"
              >
                <p className="text-sm text-gray-500">üëÜ Nh·∫•p ƒë·ªÉ xem gi·∫£i th√≠ch</p>
              </motion.div>
            )}
          </motion.div>
        ))}
      </div>
    </div>
  );
};

// Slide 5: Quick Decision Guide
export const QuickDecisionSlide: React.FC = () => {
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      question: "C√¢u c√≥ t·ª´ ch·ªâ th·ªùi gian kh√¥ng?",
      options: [
        { text: "C√≥: always, usually, often, sometimes, never, every day...", next: 1, tense: "simple" },
        { text: "C√≥: now, right now, at the moment, Look!, Listen!...", next: 2, tense: "continuous" },
        { text: "Kh√¥ng c√≥ t·ª´ ch·ªâ th·ªùi gian r√µ r√†ng", next: 3, tense: null }
      ]
    },
    {
      question: "‚úÖ D√πng Present Simple!",
      explanation: "C√°c t·ª´ n√†y ch·ªâ th√≥i quen, s·ª± l·∫∑p l·∫°i ‚Üí Present Simple",
      example: "I always brush my teeth. ‚Üí I always brush my teeth.",
      isResult: true,
      tense: "simple"
    },
    {
      question: "‚úÖ D√πng Present Continuous!",
      explanation: "C√°c t·ª´ n√†y ch·ªâ h√†nh ƒë·ªông ƒëang di·ªÖn ra ‚Üí Present Continuous",
      example: "Look! She is dancing. ‚Üí Look! She is dancing.",
      isResult: true,
      tense: "continuous"
    },
    {
      question: "H√†nh ƒë·ªông n√†y nh∆∞ th·∫ø n√†o?",
      options: [
        { text: "Th√≥i quen, l·∫∑p l·∫°i, s·ª± th·∫≠t", next: 1, tense: "simple" },
        { text: "ƒêang x·∫£y ra ngay b√¢y gi·ªù", next: 2, tense: "continuous" },
        { text: "T·∫°m th·ªùi, kh√¥ng th∆∞·ªùng xuy√™n", next: 2, tense: "continuous" }
      ]
    }
  ];

  const resetGuide = () => {
    setCurrentStep(0);
  };

  return (
    <div className="py-4">
      <motion.div
        initial={{ scale: 0.8, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-8"
      >
        <h3 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-500 to-indigo-600 bg-clip-text text-transparent font-baloo-2 mb-4">
          üéØ H∆∞·ªõng d·∫´n ch·ªçn th√¨
        </h3>
        <p className="text-xl text-gray-600">L√†m theo t·ª´ng b∆∞·ªõc ƒë·ªÉ ch·ªçn ƒë√∫ng th√¨!</p>
      </motion.div>

      <div className="max-w-4xl mx-auto">
        <motion.div
          key={currentStep}
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-gradient-to-br from-white to-gray-50 rounded-3xl p-8 shadow-2xl border-4 border-purple-200"
        >
          {steps[currentStep].isResult ? (
            // Result screen
            <div className="text-center">
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.2, type: "spring" }}
                className={`inline-flex items-center justify-center w-24 h-24 rounded-full mb-6 shadow-lg ${
                  steps[currentStep].tense === 'simple' 
                    ? 'bg-gradient-to-r from-blue-500 to-cyan-500' 
                    : 'bg-gradient-to-r from-green-500 to-emerald-500'
                } text-white`}
              >
                <CheckCircle className="w-12 h-12" />
              </motion.div>
              
              <h4 className={`text-4xl font-bold mb-6 font-baloo-2 ${
                steps[currentStep].tense === 'simple' ? 'text-blue-700' : 'text-green-700'
              }`}>
                {steps[currentStep].question}
              </h4>
              
              <div className="bg-white rounded-2xl p-6 shadow-inner mb-6">
                <p className="text-lg text-gray-700 mb-4">{steps[currentStep].explanation}</p>
                <div className="bg-gray-100 rounded-lg p-4">
                  <p className="text-md font-mono text-gray-800">{steps[currentStep].example}</p>
                </div>
              </div>
              
              <button
                onClick={resetGuide}
                className="bg-purple-500 text-white px-8 py-3 rounded-lg font-bold hover:bg-purple-600 transition-colors shadow-lg"
              >
                üîÑ Th·ª≠ l·∫°i
              </button>
            </div>
          ) : (
            // Question screen
            <div>
              <h4 className="text-3xl font-bold text-gray-800 text-center mb-8 font-baloo-2">
                {steps[currentStep].question}
              </h4>
              
              <div className="space-y-4">
                {steps[currentStep].options?.map((option, index) => (
                  <motion.button
                    key={index}
                    initial={{ x: -50, opacity: 0 }}
                    animate={{ x: 0, opacity: 1 }}
                    transition={{ delay: index * 0.1 }}
                    onClick={() => setCurrentStep(option.next)}
                    className={`w-full p-6 rounded-2xl shadow-lg transition-all duration-200 text-left hover:shadow-xl hover:-translate-y-1 ${
                      option.tense === 'simple' 
                        ? 'bg-gradient-to-r from-blue-50 to-cyan-50 border-2 border-blue-200 hover:border-blue-300' 
                        : option.tense === 'continuous'
                        ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-2 border-green-200 hover:border-green-300'
                        : 'bg-gradient-to-r from-gray-50 to-white border-2 border-gray-200 hover:border-gray-300'
                    }`}
                  >
                    <p className="text-lg font-semibold text-gray-800">{option.text}</p>
                  </motion.button>
                ))}
              </div>
            </div>
          )}
        </motion.div>
      </div>
    </div>
  );
};